go-restful
package for building REST webservices

Ernest Micklei
Software Architect, bol.com

http://github.com/emicklei/go-restful

* REST

*identification* of Resources

	http://order.services.bol.com/v1/orders/1234

and *manipulation* of Resources

	POST	 /customers/12345/orders
	
through *representations* of Resources

	{ "Order" : { "Items" : [...] }}	
	
using HTTP methods
		
	GET,POST,PUT,DELETE,HEAD


* Request handling in net/http

.code handfunc.go

- "/bar" cannot be a regular expression (or parameterized)

- need to inspect *http.Request for HTTP Method

- no content negotiation (Accept, Content-Type)

* Routing

A Route binds an HTTP request template to a function.

  GET /customers/{customer_id}/orders =>  getOrdersForCustomer(...)
  POST /customers/{customer_id}/orders =>  addOrderForCustomer(...)

A Route dispatches an incoming HTTP request to a function call.

A Route is a combination of URL path, Http method and MIME types.
	
A collection of Routes for the same resource type is modelled by a WebService.

* Routes in go-restful

.code orderresource_1.go

* Route function , the magic way

.code function_magic.go

- Route needs to determine parameter values (query?, path?)
- Route needs to marshall the return value (errors?)
- No way to access Http Headers (get from request? set for response?)
- No control over Http status (BadRequest, NoContent, Conflict...)

too much magic
much less control


* Route functions in go-restful
 
.code orderresource_2.go

* RouteFunction

In general, functions in a Route must be of:

 type RouteFunction func(*restful.Request, *restful.Response)

* Request in go-restful

- A wrapper on the standard http.Request
- Providing convenience methods

 PathParameter(name string) string

 QueryParameter(name string) string

 ReadEntity(entityReference interface{}) error

* ReadEntity

ReadEntity uses standard Unmarshalling (XML, JSON) depending on Accept HTTP header.

 order := new(Order)
 req.ReadEntity(order)

* Response in go-restful

- A wrapper on the standard http.ResponseWriter
- Providing convenience methods

 AddHeader(header string, value string) Response

 WriteError(httpStatus int, err error) Response

 WriteEntity(value interface{}) Response

* WriteEntity

WriteEntity uses standard Marshalling (XML, JSON) depending on the Content-Type defined by the Route.

 resp.WriteEntity(order)

* Documenting the API

- Webservice without API documentation is useless
- Document each operation, each parameter (path,query,body), each return value
- Source comment is not enough
- Expose API document by the service itself

* API for documenting the API

.code orderresource_3.go

* Using Swagger

.image order_api_swagger.png

* Landskape

.code landskape.go

* Landskape API (Swagger)

.image landskape-api-swagger.png